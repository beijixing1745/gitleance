------===  选项参数  ===------
HEAD 表示最新的版本
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容
查看帮助文档 git help


------===  基本  ===------
创建版本库：git init
(在当前目录创建了.git目录，推荐查看里面的结构，对了解git有帮助)

提交暂存区：git add <file_name>
(把文件修改添加到暂存区，将当前的所有文件添加到暂存区git add .)

提交更新：git commit -m "change_log" 
(实际上就是把暂存区的所有内容提交到当前分支，每一次commit就生产一次快照)

仓库当前的状态：git status

查看不同：git diff <file_name>
(查看工作区和版本库里面最新版本的区别：git diff HEAD -- <file_name>)

历史记录：git log
(查看分支合并图：git log --graph)

历史回退：git reset <commit_id> 或 git reset --hard <commit_id>

撤销暂存区：git reset HEAD <file_name>
(撤销暂存区所有内容：git reset 或 git reset HEAD)

命令记录：git reflog

恢复文件：git checkout -- <file_name>
(将文件在工作区的修改全部撤销，两种情况，一种是自修改后还没有被放到暂存区，从版本库里恢复；
另一种是已经添加到暂存区，又修改了，则从暂存区里恢复)

删除文件：git rm <file_name>
(记得要commit才可以从库里删除)


------===  分支管理  ===------
查看分支：git branch

创建分支：git branch <branch_name>

切换分支：git checkout <branch_name>

创建+切换分支：git checkout -b <branch_name>

合并某分支到当前分支(不推荐)：git merge <branch_name>
合并某分支到当前分支并保留分支历史(推荐)：git merge --no-ff -m "change_log" <branch_name>

删除分支：git branch -d <branch_name>
强行删除分支：git branch -D <branch_name>

保存当前工作区：git stash
(这并不是将当前的工作区存储到暂存区，而是把当前工作现场“储藏”起来，等以后恢复现场后继续工作)

查看保存的工作区：ggit stash list

恢复保存的工作区：git stash apply stash@{0}
(恢复指定的stash，恢复后，stash内容并不删除，需要用git stash drop来删除)
恢复保存的工作区：git stash pop
(恢复后，同时把stash内容也删除)

解决冲突：当合并分支时可能会发生冲突，这就必须人为解决冲突，Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，也就是冲突的内容


------===  标签管理  ===------
查看所有标签：git tag

创建标签：git tag <tag_name> 
或 git tag <tag_name> <commit_id> 
或 git tag -a <tag_name> -m "tag_msg" <commit_id>
(默认标签是打在最新提交的commit上的)

查看标签信息：git show <tag_name>

删除本地标签：git tag -d <tag_name>

推送标签到远程：git push origin --tags
(创建的标签都只存储在本地，不会自动推送到远程)

删除远程标签：git push origin :refs/tags/<tag_name>


------===  远程仓库  ===------
在github、gitosc或私有的git服务端创建好账号并设置好ssh的key(可以参考http://git.oschina.net/oschina/git-osc/wikis/%E5%B8%AE%E5%8A%A9#ssh-keys)，并在远程创建好仓库。

以下以github为例（目录是dengly，远程库是origin，项目是gitleance）：
关联远程端：git remote add origin https://github.com/dengly/gitleance.git

查看远程库信息：git remote
(更详细的信息：git remote -v)

推送本地库的某分支到远程：git push origin <branch_name>
(第一次推送，建议推送master分支的所有内容，这是远程端没有master分支时使用：git push -u origin master)

从远程库克隆：git clone git@github.com:dengly/gitleance.git 或 git clone https://github.com/dengly/gitleance.git

从远程分支获取内容到本分支：git pull
(没有初建关联使用git pull <remote> <branch_name>)

创建本地对分支与远程的分支链接关系：git branch --set-upstream-to origin/<branch_name> <branch_name>


------===  分支协作策略  ===------
在实际开发中，应该按照几个基本原则进行分支管理：
1、首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
2、开发都在dev分支上，也就是说，dev分支是不稳定的，到版本发布时，再把dev分支合并到master上，在master分支发布稳定版本；
3、团队每个人都在dev分支上创建自己的分支，时不时地往dev分支上合并就可以了。

所以，团队合作的分支看起来就像这样：
master  *----------------------------*-----------------*-----
         \                          /                 /
dev       *-------*-------*--------*-----*------*----*-------
          |\             /        /            /
Tom       | *------*-------*-----*-----*------*-----*--------
          |\           /        /     /
Lily      | *---------*---*----*----------*--------*---------
           \         /              /
Michael     *-------*-----*--------*---------*------*--------

推送分支：
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
其他的分支看需要。

多人协作的工作模式通常是这样：
1、首先，可以试图用git push origin branch-name推送自己的修改；
2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
3、如果合并有冲突，则解决冲突，并在本地提交；
4、没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。


------===  忽略特殊文件  ===------
忽略某些文件时，需要编写.gitignore；
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！


------===  自定义Git  ===------
每个仓库的Git配置文件都放在.git/config文件中。
而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中。

git config
如git config --global color.ui true

配置别名：git config --global alias.<alias_name> <command_name>
(如 git config --global alias.st status)


------===  搭建Git服务器  ===------
第一步，安装git：
$ sudo apt-get install git

第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git

第三步，创建证书登录：
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
$ sudo chown -R git:git sample.git

第五步，禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

第六步，克隆远程仓库：
现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
